// Generated by Dagger (https://dagger.dev).
package com.littlegig.app.presentation.upload;

import com.littlegig.app.data.repository.AuthRepository;
import com.littlegig.app.data.repository.EventRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class UploadViewModel_Factory implements Factory<UploadViewModel> {
  private final Provider<EventRepository> eventRepositoryProvider;

  private final Provider<AuthRepository> authRepositoryProvider;

  public UploadViewModel_Factory(Provider<EventRepository> eventRepositoryProvider,
      Provider<AuthRepository> authRepositoryProvider) {
    this.eventRepositoryProvider = eventRepositoryProvider;
    this.authRepositoryProvider = authRepositoryProvider;
  }

  @Override
  public UploadViewModel get() {
    return newInstance(eventRepositoryProvider.get(), authRepositoryProvider.get());
  }

  public static UploadViewModel_Factory create(Provider<EventRepository> eventRepositoryProvider,
      Provider<AuthRepository> authRepositoryProvider) {
    return new UploadViewModel_Factory(eventRepositoryProvider, authRepositoryProvider);
  }

  public static UploadViewModel newInstance(EventRepository eventRepository,
      AuthRepository authRepository) {
    return new UploadViewModel(eventRepository, authRepository);
  }
}
