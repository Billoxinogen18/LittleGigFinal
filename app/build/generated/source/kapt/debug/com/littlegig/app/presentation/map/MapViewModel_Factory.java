// Generated by Dagger (https://dagger.dev).
package com.littlegig.app.presentation.map;

import com.google.firebase.functions.FirebaseFunctions;
import com.littlegig.app.data.repository.AuthRepository;
import com.littlegig.app.data.repository.EventRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class MapViewModel_Factory implements Factory<MapViewModel> {
  private final Provider<EventRepository> eventRepositoryProvider;

  private final Provider<AuthRepository> authRepositoryProvider;

  private final Provider<FirebaseFunctions> functionsProvider;

  public MapViewModel_Factory(Provider<EventRepository> eventRepositoryProvider,
      Provider<AuthRepository> authRepositoryProvider,
      Provider<FirebaseFunctions> functionsProvider) {
    this.eventRepositoryProvider = eventRepositoryProvider;
    this.authRepositoryProvider = authRepositoryProvider;
    this.functionsProvider = functionsProvider;
  }

  @Override
  public MapViewModel get() {
    return newInstance(eventRepositoryProvider.get(), authRepositoryProvider.get(), functionsProvider.get());
  }

  public static MapViewModel_Factory create(Provider<EventRepository> eventRepositoryProvider,
      Provider<AuthRepository> authRepositoryProvider,
      Provider<FirebaseFunctions> functionsProvider) {
    return new MapViewModel_Factory(eventRepositoryProvider, authRepositoryProvider, functionsProvider);
  }

  public static MapViewModel newInstance(EventRepository eventRepository,
      AuthRepository authRepository, FirebaseFunctions functions) {
    return new MapViewModel(eventRepository, authRepository, functions);
  }
}
