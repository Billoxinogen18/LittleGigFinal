// Generated by Dagger (https://dagger.dev).
package com.littlegig.app.presentation.events;

import com.littlegig.app.data.repository.AuthRepository;
import com.littlegig.app.data.repository.ConfigRepository;
import com.littlegig.app.data.repository.EventRepository;
import com.littlegig.app.data.repository.SharingRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class EventsViewModel_Factory implements Factory<EventsViewModel> {
  private final Provider<EventRepository> eventRepositoryProvider;

  private final Provider<AuthRepository> authRepositoryProvider;

  private final Provider<SharingRepository> sharingRepositoryProvider;

  private final Provider<ConfigRepository> configRepositoryProvider;

  public EventsViewModel_Factory(Provider<EventRepository> eventRepositoryProvider,
      Provider<AuthRepository> authRepositoryProvider,
      Provider<SharingRepository> sharingRepositoryProvider,
      Provider<ConfigRepository> configRepositoryProvider) {
    this.eventRepositoryProvider = eventRepositoryProvider;
    this.authRepositoryProvider = authRepositoryProvider;
    this.sharingRepositoryProvider = sharingRepositoryProvider;
    this.configRepositoryProvider = configRepositoryProvider;
  }

  @Override
  public EventsViewModel get() {
    return newInstance(eventRepositoryProvider.get(), authRepositoryProvider.get(), sharingRepositoryProvider.get(), configRepositoryProvider.get());
  }

  public static EventsViewModel_Factory create(Provider<EventRepository> eventRepositoryProvider,
      Provider<AuthRepository> authRepositoryProvider,
      Provider<SharingRepository> sharingRepositoryProvider,
      Provider<ConfigRepository> configRepositoryProvider) {
    return new EventsViewModel_Factory(eventRepositoryProvider, authRepositoryProvider, sharingRepositoryProvider, configRepositoryProvider);
  }

  public static EventsViewModel newInstance(EventRepository eventRepository,
      AuthRepository authRepository, SharingRepository sharingRepository,
      ConfigRepository configRepository) {
    return new EventsViewModel(eventRepository, authRepository, sharingRepository, configRepository);
  }
}
