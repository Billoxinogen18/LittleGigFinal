// Generated by Dagger (https://dagger.dev).
package com.littlegig.app.services;

import android.content.Context;
import com.google.firebase.functions.FirebaseFunctions;
import com.littlegig.app.data.repository.AuthRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("dagger.hilt.android.qualifiers.ApplicationContext")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class LocationService_Factory implements Factory<LocationService> {
  private final Provider<Context> contextProvider;

  private final Provider<AuthRepository> authRepositoryProvider;

  private final Provider<FirebaseFunctions> functionsProvider;

  public LocationService_Factory(Provider<Context> contextProvider,
      Provider<AuthRepository> authRepositoryProvider,
      Provider<FirebaseFunctions> functionsProvider) {
    this.contextProvider = contextProvider;
    this.authRepositoryProvider = authRepositoryProvider;
    this.functionsProvider = functionsProvider;
  }

  @Override
  public LocationService get() {
    return newInstance(contextProvider.get(), authRepositoryProvider.get(), functionsProvider.get());
  }

  public static LocationService_Factory create(Provider<Context> contextProvider,
      Provider<AuthRepository> authRepositoryProvider,
      Provider<FirebaseFunctions> functionsProvider) {
    return new LocationService_Factory(contextProvider, authRepositoryProvider, functionsProvider);
  }

  public static LocationService newInstance(Context context, AuthRepository authRepository,
      FirebaseFunctions functions) {
    return new LocationService(context, authRepository, functions);
  }
}
